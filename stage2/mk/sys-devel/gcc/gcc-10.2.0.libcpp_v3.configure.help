-------------------------------------------------------------------------------
- libstdc++-v3
-------------------------------------------------------------------------------
`configure' configures package-unused version-unused to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/libstdc++]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET   configure for building compilers for TARGET [HOST]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-multilib       build many library versions (default)
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --disable-largefile     omit support for large files
  --enable-maintainer-mode
                          enable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-hosted-libstdcxx
                          only build freestanding C++ runtime support
  --disable-libstdcxx-verbose
                          disable termination messages to standard error
  --enable-libstdcxx-pch  build pre-compiled libstdc++ headers
                          [default=$is_hosted]
  --enable-cstdio[=PACKAGE]
                          use target-specific I/O package [default=stdio]
  --enable-clocale[=MODEL]
                          use MODEL for target locale package [default=auto]
  --enable-nls            use Native Language Support (default)
  --enable-libstdcxx-allocator[=KIND]
                          use KIND for target std::allocator base
                          [default=auto]
  --enable-cheaders[=KIND]
                          construct "C" headers for g++ [default=$c_model]
  --enable-long-long      enable template specializations for 'long long'
                          [default=yes]
  --enable-wchar_t        enable template specializations for 'wchar_t'
                          [default=yes]
  --enable-c99            turns on ISO/IEC 9899:1999 support [default=yes]
  --enable-concept-checks use Boost-derived template checks [default=no]
  --enable-libstdcxx-debug-flags=FLAGS
                          pass compiler FLAGS when building debug library
                          [default="-gdwarf-4 -g3 -O0 -D_GLIBCXX_ASSERTIONS"]
  --enable-libstdcxx-debug
                          build extra debug library [default=no]
  --enable-cxx-flags=FLAGS
                          pass compiler FLAGS when building library [default=]
  --enable-fully-dynamic-string
                          do not put empty strings in per-process static
                          memory [default=no]
  --enable-extern-template
                          enable extern template [default=yes]
  --enable-werror         turns on -Werror [default=no]
  --enable-vtable-verify  enable vtable verify [default=no]
  --enable-libstdcxx-time[=KIND]
                          use KIND for check type [default=auto]
  --enable-tls            Use thread-local storage [default=yes]
  --disable-rpath         do not hardcode runtime library paths
  --enable-linux-futex    use the Linux futex system call [default=default]
  --enable-symvers[=STYLE]
                          enables symbol versioning of the shared library
                          [default=yes]
  --enable-libstdcxx-visibility
                          enables visibility safe usage [default=yes]
  --enable-libstdcxx-dual-abi
                          support two versions of std::string [default=yes]
  --enable-libstdcxx-threads
                          enable C++11 threads support [default=auto]
  --enable-libstdcxx-filesystem-ts
                          turns on ISO/IEC TS 18822 support [default=auto]
  --enable-cet            enable Intel CET in target libraries [default=no]
  --enable-version-specific-runtime-libs
                          Specify that runtime libraries should be installed
                          in a compiler-specific directory

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-target-subdir=SUBDIR
                          configuring in a subdirectory
  --with-cross-host=HOST  configuring with a cross compiler
  --with-newlib           assume newlib as a system C library
  --with-pic              try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-libstdcxx-lock-policy={atomic,mutex,auto}
                          synchronization policy for shared_ptr reference
                          counting [default=auto]
  --with-python-dir       the location to install Python modules. This path is
                          relative starting from the prefix.
  --with-gnu-ld           assume the C compiler uses GNU ld default=no
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-libiconv-type=TYPE     type of library to search for (auto/static/shared)
  --with-system-libunwind use installed libunwind
  --with-default-libstdcxx-abi
                          set the std::string ABI to use by default
  --with-gxx-include-dir=DIR
                          installation directory for include files
  --with-toolexeclibdir=DIR
                          install libraries built with a cross compiler within
                          DIR
  --with-gcc-major-version-only
                          use only GCC major number in filesystem paths

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CPP         C preprocessor
  CXXCPP      C++ preprocessor
  CXXFILT     Location of GNU c++filt. Defaults to the first GNU version of
              `c++filt', `gc++filt' on PATH.

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to the package provider.

