`configure' configures GNU Troff 1.22.4 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/groff]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

X features:
  --x-includes=DIR    X include files are in DIR
  --x-libraries=DIR   X library files are in DIR

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --disable-rpath         do not hardcode runtime library paths

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-x                use the X Window System
  --with-appresdir=DIR    X11 application resource files
  --with-grofferdir=DIR   groffer files location
  --with-doc[=TYPE]       choose which manuals (beside man pages) are
                          desirable. TYPE can be 'yes' or 'no', or a
                          comma-separated list of one or multiple of 'html',
                          'info', 'other', 'pdf', and 'examples', to restrict
                          what is produced
  --with-uchardet         Build 'preconv' with uchardet library for file
                          encoding automatic detection [=auto|no|yes]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-libiconv-prefix[=DIR]  search for libiconv in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for libiconv in includedir and libdir
  --with-urw-fonts-dir=DIR
                          Search for URW fonts in this directory
  --with-compatibility-wrappers[=VALUE]
                          choose whether and how groff compatibility wrappers
                          for vendor-provided non-GNU macro sets are
                          installed. VALUE can be 'check', 'yes', 'no' or
                          'manual'. 'check' (the default) checks for the
                          existence of vendor-provided non-GNU macro sets, and
                          implements the 'yes' or 'no' option accordingly.
                          'yes' generates compatibility wrappers for
                          vendor-provided non-GNU macro sets to allow their
                          use with groff-based tools. The compatibility
                          wrappers are installed with the original macro set
                          name, while groff implementation of these macro sets
                          are installed with a 'g' prefix. Thus use of the
                          groff implementation of these macro sets requires
                          use of the '-mg<macro>' option (example: -mgan).
                          'no' only installs the groff implementation of macro
                          sets. 'manual' generates compatibility wrappers for
                          vendor-provided non-GNU macro sets as '<macro>-os'.
                          Use of these groff compatibility wrappers (for
                          vendor-provided non-GNU macro sets) requires the use
                          of the '-m<macro>-os' option (example: -man-os).
  --with-alt-gs=LIST      alternative names for ghostscript executable
  --with-gs=PROG          actual [/path/]name of ghostscript executable
  --with-alt-awk=LIST     alternative names for awk executable
  --with-awk=PROG         actual [/path/]name of awk executable

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  XMKMF       Path to xmkmf, Makefile generator for X Window System
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config's search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config's built-in search path
  UCHARDET_CFLAGS
              C compiler flags for UCHARDET, overriding pkg-config
  UCHARDET_LIBS
              linker flags for UCHARDET, overriding pkg-config
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <http://savannah.gnu.org/bugs/?group=groff>.
GNU Troff home page: <http://www.gnu.org/software/groff/>.
General help using GNU software: <http://www.gnu.org/gethelp/>.

