`configure' configures gettext 0.21 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/gettext]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --disable-java          do not build Java sources
  --enable-csharp[=IMPL]  choose preferred C# implementation (mono)
  --disable-largefile     omit support for large files
  --enable-threads={isoc|posix|isoc+posix|windows}
                          specify multithreading API
  --disable-threads       build without multithread safety
  --enable-shared[=PKGS]  build shared libraries
                          [default=]_LT_ENABLE_SHARED_DEFAULT[]
  --enable-static[=PKGS]  build static libraries
                          [default=]_LT_ENABLE_STATIC_DEFAULT[]
  --enable-fast-install[=PKGS]
                          optimize for fast installation
                          [default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --disable-nls           do not use Native Language Support
  --disable-rpath         do not hardcode runtime library paths
  --disable-c++           do not build C++ sources
  --enable-cross-guesses={conservative|risky}
                          specify policy for cross-compilation guesses
  --enable-relocatable    install a package that can be moved in the file
                          system
  --disable-libasprintf   do not build libasprintf
  --disable-curses        do not use libncurses, libtermcap even if they exist
  --disable-namespacing   build a library that exports undesired symbols
  --disable-openmp        do not use OpenMP
  --disable-acl           do not support ACLs

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-aix-soname=aix|svr4|both
                          shared library versioning (aka "SONAME") variant to
                          provide on AIX,
                          [default=]_LT_WITH_AIX_SONAME_DEFAULT[].
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot=DIR      Search for dependent libraries within DIR (or the
                          compiler's sysroot if not specified).
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-libiconv-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libiconv-prefix     don't search for PACKLIBS in includedir and libdir
  --with-included-gettext use the GNU gettext library included here
  --with-libintl-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libintl-prefix     don't search for PACKLIBS in includedir and libdir
  --with-libncurses-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libncurses-prefix     don't search for PACKLIBS in includedir and libdir
  --with-libtermcap-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libtermcap-prefix     don't search for PACKLIBS in includedir and libdir
  --with-libxcurses-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libxcurses-prefix     don't search for PACKLIBS in includedir and libdir
  --with-libcurses-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libcurses-prefix     don't search for PACKLIBS in includedir and libdir
  --with-libtextstyle-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libtextstyle-prefix     don't search for PACKLIBS in includedir and libdir
  --with-bison-prefix=DIR  search for bison's runtime data in DIR/share
  --with-included-libunistring  use the libunistring parts included here
  --with-libunistring-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libunistring-prefix     don't search for PACKLIBS in includedir and libdir
  --with-included-libxml  use the libxml2 included here
  --with-libxml2-prefix[=DIR]  search for PACKLIBS in DIR/include and DIR/lib
  --without-libxml2-prefix     don't search for PACKLIBS in includedir and libdir
  --without-included-regex
                          don't compile regex; this is the default on systems
                          with recent-enough versions of the GNU C Library
                          (use with caution on other systems).
  --without-emacs         do not use Emacs, don't install po-mode
  --with-lispdir          override the default lisp directory
  --without-git           don't use git to compress the infrastructure archive
  --with-cvs              use cvs to compress the infrastructure archive
                          (deprecated)
  --without-bzip2         don't use bzip2 to compress the infrastructure archive
  --without-xz            don't use xz to compress the infrastructure archive

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  LT_SYS_LIBRARY_PATH
              User-defined run-time library search path.
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  YACC        The "Yet Another C Compiler" implementation to use. Defaults to
              'bison -o y.tab.c'. Values other than 'bison -o y.tab.c' will
              most likely break on most systems.
  YFLAGS      YFLAGS contains the list arguments that will be passed by
              default to Bison. This script will default YFLAGS to the empty
              string to avoid a default value of '-d' given by some make
              applications.
  EMACS       the Emacs editor command
  EMACSLOADPATH
              the Emacs library search path
  CXXCPP      C++ preprocessor

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <bug-gettext@gnu.org>.

